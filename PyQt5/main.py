# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Gavin\Documents\PythonProjects\QR-Maker-GUI\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import qrcode
from PIL import Image


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowIcon(QtGui.QIcon("icon/icon.png"))
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.setFixedSize(800, 600)
        

        font = QtGui.QFont()
        font.setPointSize(8)
        MainWindow.setFont(font)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.GoButton = QtWidgets.QPushButton(self.centralwidget)
        self.GoButton.setGeometry(QtCore.QRect(565, 400, 80, 50))
        font = QtGui.QFont()
        font.setFamily("Gill Sans MT")
        font.setPointSize(30)
        self.GoButton.setFont(font)
        self.GoButton.setIconSize(QtCore.QSize(16, 16))
        self.GoButton.setObjectName("GoButton")
        self.GoButton.clicked.connect(self.texttourl)
        
        self.SaveButton = QtWidgets.QPushButton(self.centralwidget)
        self.SaveButton.setEnabled(False)
        self.SaveButton.setGeometry(QtCore.QRect(300, 460, 200, 50))
        font = QtGui.QFont()
        font.setPointSize(34)
        self.SaveButton.setFont(font)
        self.SaveButton.setObjectName("SaveButton")
        self.SaveButton.clicked.connect(self.saveFile)
        self.Input = QtWidgets.QLineEdit(self.centralwidget)
        self.Input.setGeometry(QtCore.QRect(155, 400, 400, 50))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.Input.setFont(font)
        self.Input.setClearButtonEnabled(False)
        self.Input.setObjectName("Input")
        self.Input.returnPressed.connect(self.texttourl)
        self.imgHolder = QtWidgets.QLabel(self.centralwidget)
        self.imgHolder.setGeometry(QtCore.QRect(225, 20, 350, 350))
        self.imgHolder.setText("")
        self.imgHolder.setObjectName("imgHolder")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "QR Code Generator"))
        self.GoButton.setText(_translate("MainWindow", "Go"))
        self.SaveButton.setText(_translate("MainWindow", "Save"))
        self.Input.setPlaceholderText(_translate("MainWindow", "Enter Text Or Url Here"))

    def texttourl(self):
        self.SaveButton.setDisabled(False)
        self.text = self.Input.text()
        self.img = qrcode.make(self.text)
        self.imgHolder.setPixmap(self.pil2pixmap(self.img))

    def pil2pixmap(self, im):

        if im.mode == "RGB":
            r, g, b = im.split()
            im = Image.merge("RGB", (b, g, r))
        elif  im.mode == "RGBA":
            r, g, b, a = im.split()
            im = Image.merge("RGBA", (b, g, r, a))
        elif im.mode == "L":
            im = im.convert("RGBA")
        # Bild in RGBA konvertieren, falls nicht bereits passiert
        im2 = im.convert("RGBA")
        data = im2.tobytes("raw", "RGBA")
        qim = QtGui.QImage(data, im.size[0], im.size[1], QtGui.QImage.Format_ARGB32)
        pixmap = QtGui.QPixmap.fromImage(qim)
        pixmap = pixmap.scaled(350,350)
        return pixmap

    def saveFile(self):
        directory = self.saveFileDialog()
        self.img.save(directory)

    def saveFileDialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        self.fileName, _ = QFileDialog.getSaveFileName(MainWindow,"QFileDialog.getSaveFileName()","","Image (*.png)", options=options)
        return str(f"{self.fileName}.png")
    



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
